define(["exports", "../../lit-html/lib/shady-render.js", "./lib/updating-element.js", "./lib/decorators.js", "../../lit-html/lit-html.js"], function (_exports, _shadyRender, _updatingElement, _decorators, _litHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    LitElement: true,
    html: true,
    svg: true
  };
  Object.defineProperty(_exports, "html", {
    enumerable: true,
    get: function get() {
      return _litHtml.html;
    }
  });
  Object.defineProperty(_exports, "svg", {
    enumerable: true,
    get: function get() {
      return _litHtml.svg;
    }
  });
  _exports.LitElement = void 0;
  Object.keys(_updatingElement).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function get() {
        return _updatingElement[key];
      }
    });
  });
  Object.keys(_decorators).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    Object.defineProperty(_exports, key, {
      enumerable: true,
      get: function get() {
        return _decorators[key];
      }
    });
  });

  var LitElement =
  /*#__PURE__*/
  function (_UpdatingElement) {
    babelHelpers.inherits(LitElement, _UpdatingElement);

    function LitElement() {
      babelHelpers.classCallCheck(this, LitElement);
      return babelHelpers.possibleConstructorReturn(this, (LitElement.__proto__ || Object.getPrototypeOf(LitElement)).apply(this, arguments));
    }

    babelHelpers.createClass(LitElement, [{
      key: "update",

      /**
       * Updates the element. This method reflects property values to attributes
       * and calls `render` to render DOM via lit-html. Setting properties inside
       * this method will *not* trigger another update.
       * * @param _changedProperties Map of changed properties with old values
       */
      value: function update(changedProperties) {
        babelHelpers.get(LitElement.prototype.__proto__ || Object.getPrototypeOf(LitElement.prototype), "update", this).call(this, changedProperties);

        if (typeof this.render === 'function') {
          this.constructor.render(this.render(), this.renderRoot, this.localName);
        } else {
          throw new Error('render() not implemented');
        }
      }
    }]);
    return LitElement;
  }(_updatingElement.UpdatingElement);
  /**
   * Render method used to render the lit-html TemplateResult to the element's
   * DOM.
   * @param {TemplateResult} Template to render.
   * @param {Element|DocumentFragment} Node into which to render.
   * @param {String} Element name.
   */


  _exports.LitElement = LitElement;
  LitElement.render = _shadyRender.render; //# sourceMappingURL=lit-element.js.map
});